container: Containerization tool written in Python

To start, 
1. make folder ~/Containers, and move container into a place in your $PATH
2. Next, run "container init void"
3. Download a Void Linux rootfs and move it into ~/Containers/void/diff
4. Run "container init $CONTAINER" and edit the container-compose.py with the commands to start
5. Once you have prepared your image, run "container start $CONTAINER"

To build,
mod-download requests -d modules
mod-convert modules/{_utils,requests}
mod build --make-script container.py


====================Docs=======================
Containerfile:
This is where you list the steps to build the image.

container-compose.py:
This is where you list the steps to run the image.

Functions (to be used in Containerfile and container-compose.py):

Run(command="",block=False) --- Run command in container. block indicates whether the command should be blocking


If you are on Linux, you can enable user and net namespaces with CONTAINER_USER_NAMESPACES=1 and CONTAINER_NET_NAMESPACES=1, respectively (do be aware that net namespaces are slower than on the root ns)

Mount(IN,OUT) --- mount directory on IN, in OUT. IN can either be an absolute path, which will mount the directory relative to the host); or an absolute path prefixed with a container name (ie, 'void:/var'), which mount the directory relative to the prefix. OUT is an absolute path relative to the container.
Base(base) --- Make base the base container for the container

Copy(IN,OUT) --- copy file/directory from host to container

Loop(func,delay) --- Run func every delay seconds. If func is a string, it will be treated as a shell command. Otherwise, it will be run as a Python function.

Base(base) --- Set base to be the base layer. This is not neccessary (you can use Layer), but can be useful if some Layers have different Bases --- only the first Base specified will be used.

Wait(delay=None) --- if delay=None, then wait forever, otherwise, wait for the indicated number of seconds

Layer(layer,mode="RO") --- add layer as an layer to the container. mode, which can either be 'RO' (for read-only) and 'RW' (for read-write), indicates how it should be mounted. All Layers must be specified at the top of the file.

Workdir(work_dir) --- set work_dir as working directory of container

Env(value) --- set environment variable in container

User(user) --- set $user as working user. Can either be just user or user:group. You can also pass in numbers for the user and group.

Commands:

Shell(shell) --- set container shell to be shell

Volume(name,path) --- Bind volume $name in the container's Volumes path to $path in container

Port(_from,_to) --- bind port in container to port on host

Start --- runs container-compose.py

Build --- runs Containerfile

Stop --- kills all processes in container

Restart --- stops, then starts the container

Chroot --- runs a shell in the container

List --- list specified containers

Init --- make new container

Edit --- edit container-compose.py

Status --- list status of container ("Started" or "Stopped")

Log --- read log of container

Clean --- delete everything in the container's diff folder

Delete --- deletes the container

Watch --- incrementally show the container's log in the terminal
