#!/usr/bin/env python
import subprocess
import re
import sys
import os
import signal
import typing
import tempfile
import shutil
import functools

ROOT=os.path.expanduser("~/Containers")

arguments=sys.argv[1:]
FUNCTION=arguments[0]
arguments=arguments[1:]
NAME=[]
flags=arguments

#Flags go before the actual container names
for i in range(len(arguments)):
    if not arguments[i].startswith("--"):
        flags=arguments[:i]
        NAME=arguments[i:]
        break

#If there's only a function name
if flags==[] and NAME==[]:
    flags+=["--all"]

def List(Names):
    names=Names
    AllContainers=os.listdir(f"{ROOT}")
    
    if "--started" in flags:
        names+=[_ for _ in AllContainers if "Started" in _status(_) ]
    if "--stopped" in flags:
        names+=[_ for _ in AllContainers if "Stopped" in _status(_) ]
    if "--all" in flags:
        names+=AllContainers
    
    return names
    
def flatten(items):
    """Yield items from any nested iterable; see Reference."""
    for x in items:
        if isinstance(x, typing.Iterable) and not isinstance(x, (str, bytes)):
            for sub_x in flatten(x):
                yield sub_x
        else:
            yield x

def print_result(result):
    for element in result:
        if element is None:
            print(end='')
        else:
            print(element)


def Container(container,_flags=None):
    def __init__(self):
        self.container=container
        if _flags is None:
            self.flags=flags
        else:
            self.flags=_flags
            
        self.base="void"
        self.unionopts="diff=RW"
        os.chdir(f"{ROOT}/{self.base}")

    def Run(self,command="",build=False):
        self.Base(self.base)
        if not self.unionopts.endswith(f":{ROOT}/{BASE}/diff=RO"):
            self.unionopts+=f":{ROOT}/{BASE}/diff=RO"
            Shell(f"sudo unionfs -o allow_other,cow,dev,hide_meta_files {UNIONOPTS} merged")
        Shell(f""" PATH={PATH} sudo nohup chroot --userspec=$(id -u):$(id -g) merged bash -c "{command}" > {tempfile.gettempdir()}/container_{container}.log 2>&1""",block=build)

        
def Run(command="",build=False):
    global UNIONOPTS
    container=os.path.basename(os.path.normpath(os.getcwd()))
    Base(BASE)
    if not UNIONOPTS.endswith(f":{ROOT}/{BASE}/diff=RO"):
        UNIONOPTS+=f":{ROOT}/{BASE}/diff=RO"
        Shell(f"sudo unionfs -o allow_other,cow,dev,hide_meta_files {UNIONOPTS} merged")
    Shell(f""" PATH={PATH} sudo nohup chroot --userspec=$(id -u):$(id -g) merged bash -c "{command}" > {tempfile.gettempdir()}/container_{container}.log 2>&1""",block=build)

def Shell(command,block=True):
    if block:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True,universal_newlines=True)
        return process.communicate()[0]
    else:
        process = subprocess.Popen(command, shell=True,stderr=subprocess.STDOUT,universal_newlines=True)
        

def getContainerProcesses(container):
    if os.path.isdir(f"{ROOT}/{container}/merged"):
       return list(map(int,Shell(f"lsof -Fp -- {ROOT}/{container}/merged | cut -c 2-").splitlines()))
    
def Loop(command,delay):
    Run(f'(while true; do "{command}"; sleep {delay}; done)')

def Base(base):
    global BASE
    BASE=f"{base}"        
    for dir in ["dev","proc","sys","run"]:
        if not os.path.ismount(f"{ROOT}/{BASE}/diff/{dir}"):
            Shell(f"bindfs -o dev /{dir} {ROOT}/{BASE}/diff/{dir}")

def Mount(IN,OUT):
    PATTERN = re.compile(r'''((?:[^\:"']|"[^"]*"|'[^']*')+)''')
    arrIN = [_ for _ in list(PATTERN.split(IN)) if _ not in ['', ':']]
    
    os.makedirs(f"diff{OUT}",exist_ok=True)
    if not os.path.ismount(f"diff{OUT}"):
        if arrIN[0]=="root":
           Shell(f"bindfs {arrIN[1]} diff{OUT}")
        elif len(arrIN)==1:
            Shell(f"bindfs {arrIN[0]} diff{OUT}")
        else:
           Shell(f"bindfs {ROOT}/{arrIN[0]}/diff{arrIN[1]} diff{OUT}")

def Layer(layer,mode="RO"):
    global UNIONOPTS
    UNIONOPTS+=f":{ROOT}/{layer}/diff={mode}"
            
def _start(container):
    os.chdir(f"{ROOT}/{container}")
    if _status(container)=="Started":
        return f"Container {container} is already started"
        
    with open("container-compose.py") as f:
        code = compile(f.read(), 'diff/container-compose.py', 'exec')
        exec(code,globals(),locals())
    #Don't have to put Run() just to start it
    Run()
    if "--only-chroot" in flags:
        return [ _chroot(container), _stop(container)]
    elif "--and-chroot" in flags:
        return [_chroot(container)]
        
def _build(container):
    global Run
    
    os.chdir(f"{ROOT}/{container}")
    _stop(container)
    
    #Redefine Run for build=True
    Run=functools.partial(Run,build=True)
    with open("Containerfile") as f:
     code = compile(f.read(), 'diff/Containerfile', 'exec')
     exec(code,globals(),locals())
    _stop(container)
       
def _stop(container):
    os.chdir(f"{ROOT}/{container}")
    if _status(container)=="Stopped":
        return f"Container {container} is already stopped"
    for pid in getContainerProcesses(container):
        #Shell(f"kill -9 {pid}")
        os.kill(pid,signal.SIGKILL)
    Shell("sudo umount -l merged")
    
    for dir in Shell(f"mount | awk '$0=$3' | grep {ROOT}/{container}/diff").splitlines():
         Shell(f"umount -l {dir}")
    try:
       os.remove(f"{tempfile.gettempdir()}/container_{container}.log")
    except:
        pass

def _restart(container):
    return [_stop(container),_start(container)]
    
def _chroot(container):
    global flags
    if flags==[] and ("Stopped" in _status(container)):
        flags+=['--only-chroot']
        _start(container)
        return
    os.system(f" PATH={PATH} sudo chroot --userspec=$(id -u):$(id -g) {ROOT}/{container}/merged bash")

def _freeze(dummy):
    os.system(f"{os.path.realpath(__file__)} stop > /dev/null")
    for dir in ["dev","proc","sys","run"]:
        if os.path.ismount(f"{ROOT}/{BASE}/diff/{dir}"):
            Shell(f"umount {ROOT}/{BASE}/diff/{dir}")
    exit()
    
    
def _list(container):
    return [container]

def _init(container):
    global flags
    os.makedirs(f"{ROOT}/{container}",exist_ok=True)
    os.chdir(f"{ROOT}/{container}")
    os.makedirs("diff",exist_ok=True)
    os.makedirs("merged",exist_ok=True)
    with open(f"container-compose.py",'a'):
        pass
    
    if '--build' in flags:
        with open(f"Containerfile",'a'):
            pass

    _edit(container)
    
    if '--and-chroot' in flags:
        flags+=['--only-chroot']
        _start(container)

def _edit(container):
    if '--build' in flags:
        os.system(f"$EDITOR {ROOT}/{container}/Containerfile")
    else:
        os.system(f"$EDITOR {ROOT}/{container}/container-compose.py")

def _status(container):
    if os.path.isfile(f"{tempfile.gettempdir()}/container_{container}.log"):
        return "Started"
    else:
        return "Stopped"

def _log(container):
    os.system(f"less +G {tempfile.gettempdir()}/container_{container}.log")

def _clean(container):
    _stop(container)
    os.system(f"sudo rm -rf {ROOT}/{container}/diff/*")

def _delete(container):
    _stop(container)
    os.system(f"sudo rm -rf {ROOT}/{container}")

NAME=List(NAME)
for name in NAME:
    PATH="$PATH:/bin:/usr/sbin:/sbin:/usr/bin"
    
    BASE="void"
    UNIONOPTS="diff=RW"
    
    if not os.path.isdir(f"{ROOT}/{name}"):
        if FUNCTION!="init":
         print(f"Container {name} does not exist")
         exit()   
         
    result=list(flatten([globals()[f"_{FUNCTION}"](name)]))
    print_result(result)

    
