#!/usr/bin/env python
import subprocess
import re
import sys
import os
import signal
import typing
import tempfile
import shutil
import functools

ROOT=os.path.expanduser("~/Containers")

arguments=sys.argv[1:]
FUNCTION=arguments[0]
arguments=arguments[1:]
NAME=[]
flags=arguments

#Flags go before the actual container names
for i in range(len(arguments)):
    if not arguments[i].startswith("--"):
        flags=arguments[:i]
        NAME=arguments[i:]
        break

#If there's only a function name
if flags==[] and NAME==[]:
    flags+=["--all"]

def List(Names):
    names=Names
    AllContainers=os.listdir(f"{ROOT}")
    
    if "--started" in flags:
        names+=[_ for _ in AllContainers if "Started" in Container(_).Status() ]
    if "--stopped" in flags:
        names+=[_ for _ in AllContainers if "Stopped" in Container(_).Status() ]
    if "--all" in flags:
        names+=AllContainers
    
    return names
    
def flatten(items):
    """Yield items from any nested iterable; see Reference."""
    for x in items:
        if isinstance(x, typing.Iterable) and not isinstance(x, (str, bytes)):
            for sub_x in flatten(x):
                yield sub_x
        else:
            yield x

def print_result(result):
    for element in result:
        if element is None:
            print(end='')
        else:
            print(element)

def Shell(command,block=True):
    if block:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True,universal_newlines=True)
        return process.communicate()[0]
    else:
        process = subprocess.Popen(command, shell=True,stderr=subprocess.STDOUT,universal_newlines=True)

def Mount(IN,OUT):
    PATTERN = re.compile(r'''((?:[^\:"']|"[^"]*"|'[^']*')+)''')
    arrIN = [_ for _ in list(PATTERN.split(IN)) if _ not in ['', ':']]
    
    os.makedirs(f"diff{OUT}",exist_ok=True)
    if not os.path.ismount(f"diff{OUT}"):
        if arrIN[0]=="root":
           Shell(f"bindfs {arrIN[1]} diff{OUT}")
        elif len(arrIN)==1:
            Shell(f"bindfs {arrIN[0]} diff{OUT}")
        else:
           Shell(f"bindfs {ROOT}/{arrIN[0]}/diff{arrIN[1]} diff{OUT}")


class Container:
    def __init__(self,_container,_flags=None,_unionopts=None):
        self.container=_container
        if _flags is None:
            self.flags=flags
        else:
            self.flags=_flags
            
        self.base="void"
        
        if _unionopts is None:
            self.unionopts="diff=RW"
        else:
            self.unionopts=_unionopts
        #Deal with with chance this doesn't exist yet
        os.chdir(f"{ROOT}/{self.container}")

    def Run(self,command="",block=False):
        self.Base(self.base)
        if not self.unionopts.endswith(f":{ROOT}/{self.base}/diff=RO"):
            self.unionopts+=f":{ROOT}/{self.base}/diff=RO"
            Shell(f"sudo unionfs -o allow_other,cow,dev,hide_meta_files {self.unionopts} merged")
        Shell(f""" PATH={PATH} sudo nohup chroot --userspec=$(id -u):$(id -g) merged bash -c "{command}" > {tempfile.gettempdir()}/container_{self.container}.log 2>&1""",block=block)
    
    def GetProc(self):
        if os.path.isdir("merged"):
           return list(map(int,Shell("lsof -Fp -- merged | cut -c 2-").splitlines()))
    
    def Base(self,base):
        self.base=base
        for dir in ["dev","proc","sys","run"]:
            if not os.path.ismount(f"{ROOT}/{self.base}/diff/{dir}"):
                Shell(f"bindfs -o dev /{dir} {ROOT}/{self.base}/diff/{dir}")

    def Layer(self,layer,mode="RO"):
        self.unionopts+=f":{ROOT}/{layer}/diff={mode}"
            
    def Start(self):
        
        if self.Status()=="Started":
            return f"Container {self.container} is already started"
        
        with open("container-compose.py") as f:
            code = compile(f.read(), 'container-compose.py', 'exec')
            exec(code,globals(),locals())
            
        #Don't have to put Run() just to start it
        Run()
        if "--only-chroot" in self.flags:
            return [ self.Chroot(), self.Stop()]
        elif "--and-chroot" in self.flags:
            return [self.Chroot()]
        
    def Build(self):
        
        self.Stop()
        
        #Redefine Run for build=True
        self.Run=functools.partial(self.Run,build=True)
        with open("Containerfile") as f:
         code = compile(f.read(), 'Containerfile', 'exec')
         exec(code,globals(),locals())
        self.Stop(self.container)
       
    def Stop(self):
        if self.Status()=="Stopped":
            return f"Container {self.container} is already stopped"
        for pid in self.GetProc():
            #Shell(f"kill -9 {pid}")
            os.kill(pid,signal.SIGKILL)
        Shell("sudo umount -l merged")
        
        for dir in Shell(f"mount | awk '$0=$3' | grep {ROOT}/{self.container}/diff").splitlines():
             Shell(f"umount -l {dir}")
        try:
           os.remove(f"{tempfile.gettempdir()}/container_{self.container}.log")
        except:
            pass

    def Restart(self):
        return [self.Stop(),self.Start()]
    
    def Chroot(self):
        if self.flags==[] and ("Stopped" in self.Status()):
            return [Container(self.container,self.flags+['--only-chroot'],self.unionopts).Start()]
        os.system(f" PATH={PATH} sudo chroot --userspec=$(id -u):$(id -g) {ROOT}/{self.container}/merged bash")

    def Freeze():
        os.system(f"{os.path.realpath(__file__)} stop > /dev/null")
        for dir in ["dev","proc","sys","run"]:
            if os.path.ismount(f"{ROOT}/{self.base}/diff/{dir}"):
                Shell(f"umount {ROOT}/{self.base}/diff/{dir}")
        exit()
    
    
    def List(self):
        return self.container

    def Init(self):
        #Probably unneccessary 
        os.makedirs(f"{ROOT}/{self.container}",exist_ok=True)
        
        os.makedirs("diff",exist_ok=True)
        os.makedirs("merged",exist_ok=True)
        with open(f"container-compose.py",'a'):
            pass
        
        if '--build' in flags:
            with open(f"Containerfile",'a'):
                pass
    
        self.Edit()
        
        if '--and-chroot' in flags:
            return [Container(self.container,self.flags+['--only-chroot'],self.unionopts).Start()]

    def Edit(self):
        if '--build' in self.flags:
            os.system(f"$EDITOR {ROOT}/{self.container}/Containerfile")
        else:
            os.system(f"$EDITOR {ROOT}/{self.container}/container-compose.py")

    def Status(self):
        if os.path.isfile(f"{tempfile.gettempdir()}/container_{self.container}.log"):
            return "Started"
        else:
            return "Stopped"

    def Log(self):
        os.system(f"less +G {tempfile.gettempdir()}/container_{self.container}.log")
    
    def Clean(self):
        self.Stop()
        os.system(f"sudo rm -rf {ROOT}/{self.container}/diff/*")
    
    def delete(self):
        self.Stop()
        os.system(f"sudo rm -rf {ROOT}/{self.container}")


NAME=List(NAME)
for name in NAME:
    PATH="$PATH:/bin:/usr/sbin:/sbin:/usr/bin"
    
    BASE="void"
    UNIONOPTS="diff=RW"
    
    container=Container(name,flags,UNIONOPTS)
    Run=container.Run
    Layer=container.Layer
    
    if not os.path.isdir(f"{ROOT}/{name}"):
        if FUNCTION!="init":
         print(f"Container {name} does not exist")
         exit()   
    
    result=list(flatten([getattr(container,FUNCTION.title())()]))
    print_result(result)

    
